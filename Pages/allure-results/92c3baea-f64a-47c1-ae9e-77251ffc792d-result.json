{"name": "test_title", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : \n  (Session info: chrome=131.0.6778.266)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7469280D5+2992373]\n\t(No symbol) [0x00007FF7465BBFD0]\n\t(No symbol) [0x00007FF74645590A]\n\t(No symbol) [0x00007FF7464A14A8]\n\t(No symbol) [0x00007FF7464CF36A]\n\t(No symbol) [0x00007FF74649C596]\n\t(No symbol) [0x00007FF7464CF580]\n\t(No symbol) [0x00007FF7464EF584]\n\t(No symbol) [0x00007FF7464CF113]\n\t(No symbol) [0x00007FF74649A918]\n\t(No symbol) [0x00007FF74649BA81]\n\tGetHandleVerifier [0x00007FF746986A2D+3379789]\n\tGetHandleVerifier [0x00007FF74699C32D+3468109]\n\tGetHandleVerifier [0x00007FF746990043+3418211]\n\tGetHandleVerifier [0x00007FF74671C78B+847787]\n\t(No symbol) [0x00007FF7465C757F]\n\t(No symbol) [0x00007FF7465C2FC4]\n\t(No symbol) [0x00007FF7465C315D]\n\t(No symbol) [0x00007FF7465B2979]\n\tBaseThreadInitThunk [0x00007FFAF1F27374+20]\n\tRtlUserThreadStart [0x00007FFAF219CC91+33]", "trace": "setup_teardown = None\n\n    @pytest.mark.smoke\n    def test_title(setup_teardown):\n        logging.info(\"Opening website\")\n        driver.get(\"https://www.tutorialspoint.com/selenium/practice/selenium_automation_practice.php\")\n        driver.maximize_window()\n        # driver.send_keys(Keys.F5)\n        a = driver.find_element(By.XPATH, '//input[@name=\"picture\"]')\n        time.sleep(10)\n>       a.send_keys(Keys.F5)\n\nLoginPage.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: in send_keys\n    self._execute(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EC76BBE4E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : \\ue035\\\\n...07FF7465B2979]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAF1F27374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAF219CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : \nE         (Session info: chrome=131.0.6778.266)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7469280D5+2992373]\nE       \t(No symbol) [0x00007FF7465BBFD0]\nE       \t(No symbol) [0x00007FF74645590A]\nE       \t(No symbol) [0x00007FF7464A14A8]\nE       \t(No symbol) [0x00007FF7464CF36A]\nE       \t(No symbol) [0x00007FF74649C596]\nE       \t(No symbol) [0x00007FF7464CF580]\nE       \t(No symbol) [0x00007FF7464EF584]\nE       \t(No symbol) [0x00007FF7464CF113]\nE       \t(No symbol) [0x00007FF74649A918]\nE       \t(No symbol) [0x00007FF74649BA81]\nE       \tGetHandleVerifier [0x00007FF746986A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF74699C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF746990043+3418211]\nE       \tGetHandleVerifier [0x00007FF74671C78B+847787]\nE       \t(No symbol) [0x00007FF7465C757F]\nE       \t(No symbol) [0x00007FF7465C2FC4]\nE       \t(No symbol) [0x00007FF7465C315D]\nE       \t(No symbol) [0x00007FF7465B2979]\nE       \tBaseThreadInitThunk [0x00007FFAF1F27374+20]\nE       \tRtlUserThreadStart [0x00007FFAF219CC91+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "f5b52296-121b-4f40-a0c4-3a4d1553e598-attachment.txt", "type": "text/plain"}], "start": 1737257831451, "stop": 1737257847195, "uuid": "7a1e8124-a064-4037-9619-3540a3eb2932", "historyId": "a3d6e65315db193834252152274069eb", "testCaseId": "a3d6e65315db193834252152274069eb", "fullName": "Pages.LoginPage#test_title", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Pages"}, {"name": "suite", "value": "LoginPage"}, {"name": "host", "value": "DESKTOP-9GMDFCC"}, {"name": "thread", "value": "10976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Pages.LoginPage"}]}